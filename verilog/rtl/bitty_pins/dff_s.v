/* Generated by Yosys 0.9 (git sha1 1979e0b) */

(* cells_not_processed =  1  *)
(* src = "dff.v:3" *)
module dff(clk, en, d_in, starting, reset, mux_out);
  (* src = "dff.v:13" *)
  wire [15:0] _00_;
  wire [15:0] _01_;
  wire [15:0] _02_;
  wire [15:0] _03_;
  (* src = "dff.v:4" *)
  input clk;
  (* src = "dff.v:6" *)
  input [15:0] d_in;
  (* src = "dff.v:5" *)
  input en;
  (* src = "dff.v:10" *)
  output [15:0] mux_out;
  reg [15:0] mux_out;
  (* src = "dff.v:8" *)
  input reset;
  (* src = "dff.v:7" *)
  input [15:0] starting;
  assign _02_[12] = reset ? starting[12] : 1'h0;
  assign _02_[13] = reset ? starting[13] : 1'h0;
  assign _02_[14] = reset ? starting[14] : 1'h0;
  assign _02_[15] = reset ? starting[15] : 1'h0;
  assign _03_[0] = reset ? _01_[0] : 1'h0;
  assign _03_[1] = reset ? _01_[1] : 1'h0;
  assign _03_[2] = reset ? _01_[2] : 1'h0;
  assign _03_[3] = reset ? _01_[3] : 1'h0;
  assign _03_[4] = reset ? _01_[4] : 1'h0;
  assign _03_[5] = reset ? _01_[5] : 1'h0;
  assign _03_[6] = reset ? _01_[6] : 1'h0;
  assign _03_[7] = reset ? _01_[7] : 1'h0;
  assign _03_[8] = reset ? _01_[8] : 1'h0;
  assign _03_[9] = reset ? _01_[9] : 1'h0;
  assign _03_[10] = reset ? _01_[10] : 1'h0;
  assign _03_[11] = reset ? _01_[11] : 1'h0;
  assign _03_[12] = reset ? _01_[12] : 1'h0;
  assign _03_[13] = reset ? _01_[13] : 1'h0;
  assign _03_[14] = reset ? _01_[14] : 1'h0;
  assign _03_[15] = reset ? _01_[15] : 1'h0;
  assign _00_[0] = en ? (* src = "dff.v:17" *) d_in[0] : mux_out[0];
  assign _00_[1] = en ? (* src = "dff.v:17" *) d_in[1] : mux_out[1];
  assign _00_[2] = en ? (* src = "dff.v:17" *) d_in[2] : mux_out[2];
  assign _00_[3] = en ? (* src = "dff.v:17" *) d_in[3] : mux_out[3];
  assign _00_[4] = en ? (* src = "dff.v:17" *) d_in[4] : mux_out[4];
  assign _00_[5] = en ? (* src = "dff.v:17" *) d_in[5] : mux_out[5];
  assign _00_[6] = en ? (* src = "dff.v:17" *) d_in[6] : mux_out[6];
  assign _00_[7] = en ? (* src = "dff.v:17" *) d_in[7] : mux_out[7];
  assign _00_[8] = en ? (* src = "dff.v:17" *) d_in[8] : mux_out[8];
  assign _00_[9] = en ? (* src = "dff.v:17" *) d_in[9] : mux_out[9];
  assign _00_[10] = en ? (* src = "dff.v:17" *) d_in[10] : mux_out[10];
  assign _00_[11] = en ? (* src = "dff.v:17" *) d_in[11] : mux_out[11];
  assign _00_[12] = en ? (* src = "dff.v:17" *) d_in[12] : mux_out[12];
  assign _00_[13] = en ? (* src = "dff.v:17" *) d_in[13] : mux_out[13];
  assign _00_[14] = en ? (* src = "dff.v:17" *) d_in[14] : mux_out[14];
  assign _00_[15] = en ? (* src = "dff.v:17" *) d_in[15] : mux_out[15];
  assign _02_[0] = reset ? starting[0] : 1'h0;
  assign _02_[1] = reset ? starting[1] : 1'h0;
  assign _02_[2] = reset ? starting[2] : 1'h0;
  assign _02_[3] = reset ? starting[3] : 1'h0;
  assign _02_[4] = reset ? starting[4] : 1'h0;
  assign _02_[5] = reset ? starting[5] : 1'h0;
  assign _02_[6] = reset ? starting[6] : 1'h0;
  assign _02_[7] = reset ? starting[7] : 1'h0;
  assign _02_[8] = reset ? starting[8] : 1'h0;
  assign _02_[9] = reset ? starting[9] : 1'h0;
  assign _02_[10] = reset ? starting[10] : 1'h0;
  assign _02_[11] = reset ? starting[11] : 1'h0;
  assign _01_[0] = ~starting[0];
  assign _01_[1] = ~starting[1];
  assign _01_[2] = ~starting[2];
  assign _01_[3] = ~starting[3];
  assign _01_[4] = ~starting[4];
  assign _01_[5] = ~starting[5];
  assign _01_[6] = ~starting[6];
  assign _01_[7] = ~starting[7];
  assign _01_[8] = ~starting[8];
  assign _01_[9] = ~starting[9];
  assign _01_[10] = ~starting[10];
  assign _01_[11] = ~starting[11];
  assign _01_[12] = ~starting[12];
  assign _01_[13] = ~starting[13];
  assign _01_[14] = ~starting[14];
  assign _01_[15] = ~starting[15];
  (* src = "dff.v:13" *)
  always @(posedge clk or posedge _02_[0] or posedge _03_[0])
    if (_03_[0])
      mux_out[0] <= 0;
    else if (_02_[0])
      mux_out[0] <= 1;
    else
      mux_out[0] <= _00_[0];
  (* src = "dff.v:13" *)
  always @(posedge clk or posedge _02_[1] or posedge _03_[1])
    if (_03_[1])
      mux_out[1] <= 0;
    else if (_02_[1])
      mux_out[1] <= 1;
    else
      mux_out[1] <= _00_[1];
  (* src = "dff.v:13" *)
  always @(posedge clk or posedge _02_[2] or posedge _03_[2])
    if (_03_[2])
      mux_out[2] <= 0;
    else if (_02_[2])
      mux_out[2] <= 1;
    else
      mux_out[2] <= _00_[2];
  (* src = "dff.v:13" *)
  always @(posedge clk or posedge _02_[3] or posedge _03_[3])
    if (_03_[3])
      mux_out[3] <= 0;
    else if (_02_[3])
      mux_out[3] <= 1;
    else
      mux_out[3] <= _00_[3];
  (* src = "dff.v:13" *)
  always @(posedge clk or posedge _02_[4] or posedge _03_[4])
    if (_03_[4])
      mux_out[4] <= 0;
    else if (_02_[4])
      mux_out[4] <= 1;
    else
      mux_out[4] <= _00_[4];
  (* src = "dff.v:13" *)
  always @(posedge clk or posedge _02_[5] or posedge _03_[5])
    if (_03_[5])
      mux_out[5] <= 0;
    else if (_02_[5])
      mux_out[5] <= 1;
    else
      mux_out[5] <= _00_[5];
  (* src = "dff.v:13" *)
  always @(posedge clk or posedge _02_[6] or posedge _03_[6])
    if (_03_[6])
      mux_out[6] <= 0;
    else if (_02_[6])
      mux_out[6] <= 1;
    else
      mux_out[6] <= _00_[6];
  (* src = "dff.v:13" *)
  always @(posedge clk or posedge _02_[7] or posedge _03_[7])
    if (_03_[7])
      mux_out[7] <= 0;
    else if (_02_[7])
      mux_out[7] <= 1;
    else
      mux_out[7] <= _00_[7];
  (* src = "dff.v:13" *)
  always @(posedge clk or posedge _02_[8] or posedge _03_[8])
    if (_03_[8])
      mux_out[8] <= 0;
    else if (_02_[8])
      mux_out[8] <= 1;
    else
      mux_out[8] <= _00_[8];
  (* src = "dff.v:13" *)
  always @(posedge clk or posedge _02_[9] or posedge _03_[9])
    if (_03_[9])
      mux_out[9] <= 0;
    else if (_02_[9])
      mux_out[9] <= 1;
    else
      mux_out[9] <= _00_[9];
  (* src = "dff.v:13" *)
  always @(posedge clk or posedge _02_[10] or posedge _03_[10])
    if (_03_[10])
      mux_out[10] <= 0;
    else if (_02_[10])
      mux_out[10] <= 1;
    else
      mux_out[10] <= _00_[10];
  (* src = "dff.v:13" *)
  always @(posedge clk or posedge _02_[11] or posedge _03_[11])
    if (_03_[11])
      mux_out[11] <= 0;
    else if (_02_[11])
      mux_out[11] <= 1;
    else
      mux_out[11] <= _00_[11];
  (* src = "dff.v:13" *)
  always @(posedge clk or posedge _02_[12] or posedge _03_[12])
    if (_03_[12])
      mux_out[12] <= 0;
    else if (_02_[12])
      mux_out[12] <= 1;
    else
      mux_out[12] <= _00_[12];
  (* src = "dff.v:13" *)
  always @(posedge clk or posedge _02_[13] or posedge _03_[13])
    if (_03_[13])
      mux_out[13] <= 0;
    else if (_02_[13])
      mux_out[13] <= 1;
    else
      mux_out[13] <= _00_[13];
  (* src = "dff.v:13" *)
  always @(posedge clk or posedge _02_[14] or posedge _03_[14])
    if (_03_[14])
      mux_out[14] <= 0;
    else if (_02_[14])
      mux_out[14] <= 1;
    else
      mux_out[14] <= _00_[14];
  (* src = "dff.v:13" *)
  always @(posedge clk or posedge _02_[15] or posedge _03_[15])
    if (_03_[15])
      mux_out[15] <= 0;
    else if (_02_[15])
      mux_out[15] <= 1;
    else
      mux_out[15] <= _00_[15];
endmodule
