/* Generated by Yosys 0.9 (git sha1 1979e0b) */

(* cells_not_processed =  1  *)
(* src = "bitty.v:2" *)
module bitty(run, clk, reset, d_instr, d_out, done);
  (* src = "bitty.v:20" *)
  wire [15:0] alu_out;
  (* src = "bitty.v:24" *)
  wire [2:0] alu_sel;
  (* src = "bitty.v:4" *)
  input clk;
  (* src = "bitty.v:6" *)
  input [15:0] d_instr;
  (* src = "bitty.v:8" *)
  output [15:0] d_out;
  (* src = "bitty.v:9" *)
  output done;
  (* src = "bitty.v:14" *)
  wire [7:0] en;
  (* src = "bitty.v:23" *)
  wire en_c;
  (* src = "bitty.v:23" *)
  wire en_inst;
  (* src = "bitty.v:23" *)
  wire en_s;
  (* src = "bitty.v:26" *)
  wire [15:0] im_d;
  (* src = "bitty.v:25" *)
  wire [15:0] instruction;
  (* src = "bitty.v:13" *)
  wire [3:0] mux_sel;
  (* src = "bitty.v:2" *)
  wire [15:0] \out[0] ;
  (* src = "bitty.v:2" *)
  wire [15:0] \out[1] ;
  (* src = "bitty.v:2" *)
  wire [15:0] \out[2] ;
  (* src = "bitty.v:2" *)
  wire [15:0] \out[3] ;
  (* src = "bitty.v:2" *)
  wire [15:0] \out[4] ;
  (* src = "bitty.v:2" *)
  wire [15:0] \out[5] ;
  (* src = "bitty.v:2" *)
  wire [15:0] \out[6] ;
  (* src = "bitty.v:2" *)
  wire [15:0] \out[7] ;
  (* src = "bitty.v:17" *)
  wire [15:0] out_mux;
  (* src = "bitty.v:30" *)
  wire [15:0] regc;
  (* src = "bitty.v:29" *)
  wire [15:0] regs;
  (* src = "bitty.v:5" *)
  input reset;
  (* src = "bitty.v:3" *)
  input run;
  (* module_not_derived = 32'd1 *)
  (* src = "bitty.v:62" *)
  dff _0_ (
    .clk(clk),
    .d_in(regc),
    .en(en[0]),
    .mux_out(\out[0] ),
    .reset(reset),
    .starting(16'h0000)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "bitty.v:62" *)
  dff _1_ (
    .clk(clk),
    .d_in(regc),
    .en(en[1]),
    .mux_out(\out[1] ),
    .reset(reset),
    .starting(16'h0000)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "bitty.v:62" *)
  dff _2_ (
    .clk(clk),
    .d_in(regc),
    .en(en[2]),
    .mux_out(\out[2] ),
    .reset(reset),
    .starting(16'h0000)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "bitty.v:62" *)
  dff _3_ (
    .clk(clk),
    .d_in(regc),
    .en(en[3]),
    .mux_out(\out[3] ),
    .reset(reset),
    .starting(16'h0000)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "bitty.v:62" *)
  dff _4_ (
    .clk(clk),
    .d_in(regc),
    .en(en[4]),
    .mux_out(\out[4] ),
    .reset(reset),
    .starting(16'h0000)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "bitty.v:62" *)
  dff _5_ (
    .clk(clk),
    .d_in(regc),
    .en(en[5]),
    .mux_out(\out[5] ),
    .reset(reset),
    .starting(16'h0000)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "bitty.v:62" *)
  dff _6_ (
    .clk(clk),
    .d_in(regc),
    .en(en[6]),
    .mux_out(\out[6] ),
    .reset(reset),
    .starting(16'h0000)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "bitty.v:62" *)
  dff _7_ (
    .clk(clk),
    .d_in(regc),
    .en(en[7]),
    .mux_out(\out[7] ),
    .reset(reset),
    .starting(16'h0000)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "bitty.v:51" *)
  alu alu_inst (
    .alu_out(alu_out),
    .in_a(regs),
    .in_b(out_mux),
    .select(alu_sel)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "bitty.v:33" *)
  cpu cpu_inst (
    .clk(clk),
    .d_inst(instruction),
    .done(done),
    .en(en),
    .en_c(en_c),
    .en_inst(en_inst),
    .en_s(en_s),
    .im_d(im_d),
    .mux_sel(mux_sel),
    .reset(reset),
    .run(run),
    .sel(alu_sel)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "bitty.v:79" *)
  mux mux_inst (
    .def_val(16'h0000),
    .im_d(im_d),
    .mux_out(out_mux),
    .mux_sel(mux_sel),
    .reg0(\out[0] ),
    .reg1(\out[1] ),
    .reg2(\out[2] ),
    .reg3(\out[3] ),
    .reg4(\out[4] ),
    .reg5(\out[5] ),
    .reg6(\out[6] ),
    .reg7(\out[7] )
  );
  (* module_not_derived = 32'd1 *)
  (* src = "bitty.v:96" *)
  dff reg_c (
    clk,
    en_c,
    alu_out,
    16'h0000,
    reset,
    regc
  );
  (* module_not_derived = 32'd1 *)
  (* src = "bitty.v:94" *)
  dff reg_inst (
    clk,
    en_inst,
    d_instr,
    16'h0000,
    reset,
    instruction
  );
  (* module_not_derived = 32'd1 *)
  (* src = "bitty.v:95" *)
  dff reg_s (
    clk,
    en_s,
    out_mux,
    16'h0000,
    reset,
    regs
  );
  assign d_out = regc;
endmodule
